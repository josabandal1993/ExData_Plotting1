cacheSolve(b)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(invers) inv <<- invers
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
b =makeCacheMatrix(a)
cacheSolve(b)
## These functions written in partial fulfillment of Coursera Data Science: R Programming
## This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) { ## define the argument with default mode of "matrix"
inv <- NULL                             ## initialize inv as NULL; will hold value of matrix inverse
set <- function(y) {                    ## define the set function to assign new
x <<- y                             ## value of matrix in parent environment
inv <<- NULL                        ## if there is a new matrix, reset inv to NULL
}
get <- function() x                     ## define the get fucntion - returns value of the matrix argument
setinverse <- function(inverse) inv <<- inverse  ## assigns value of inv in parent environment
getinverse <- function() inv                     ## gets the value of inv where called
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)  ## you need this in order to refer
## to the functions with the $ operator
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve will retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
## These functions written in partial fulfillment of Coursera Data Science: R Programming
## This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) { ## define the argument with default mode of "matrix"
inv <- NULL                             ## initialize inv as NULL; will hold value of matrix inverse
set <- function(y) {                    ## define the set function to assign new
x <<- y                             ## value of matrix in parent environment
inv <<- NULL                        ## if there is a new matrix, reset inv to NULL
}
get <- function() x                     ## define the get fucntion - returns value of the matrix argument
setinverse <- function(inverse) inv <<- inverse  ## assigns value of inv in parent environment
getinverse <- function() inv                     ## gets the value of inv where called
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)  ## you need this in order to refer
## to the functions with the $ operator
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve will retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
b =makeCacheMatrix(a)
cacheSolve(b)
a
a
a
a
a
a
a
a = matrix(1:4,nrow=2,ncol=2)
a
cacheSolve(b)
b =makeCacheMatrix(a)
cacheSolve(b)
makeCacheMatrix <- function(x = matrix()) {
mat <- x
inv <- solve(x)
backup <- mat
matt <- list(matrix = mat, inverse = inv, backup = backup)
}
## cacheSolve takes the output of makeCacheMatrix and returns the inverse
## of the given matrix. If the x$matrix and x$backup are identical and
## x$inverse is not null, then it retrieves the cached inverse. If x$inverse
## is null or if x$matrix has been altered to differ from x$backup, the
## function recalculates the inverse of the matrix.
cacheSolve <- function(x, ...) {
inv <- x$inverse
if(is.null(inv) || x$matrix != x$backup){
print("no cached inverse, calculating inverse...")
inverse <- solve(x$matrix)
print(inverse)
}else if(!is.null(inv) && x$matrix == x$backup){
print("retrieving cached inverse")
inverse <- inv
print(inverse)
}
}
b =makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
cacheSolve(b)
a = matrix(1:4,nrow=2,ncol=2)
## The first makeCacheMatrix function takes a matrix array and outputs a
## custom object (list) that includes the matrix and it's inverse that can
## be inputted into the cacheSolve function.
## The cacheSolve function checks if the inverse of the matrix has been
## cached. If not, it recalculates the inverse of the original matrix.
## makeCacheMatrix takes an input of a matrix array and returns a list
## of the matrix and the inverse of the matrix, cached. It also includes a
## backup of the matrix, assuming makeCacheMatrix$matrix can be edited.
## This allows the backup (assumed not to be edited) to serve as a checking
## mechanism to verify if the inverse needs to be recalculated.
makeCacheMatrix <- function(x = matrix()) {
mat <- x
inv <- solve(x)
backup <- mat
matt <- list(matrix = mat, inverse = inv, backup = backup)
}
## cacheSolve takes the output of makeCacheMatrix and returns the inverse
## of the given matrix. If the x$matrix and x$backup are identical and
## x$inverse is not null, then it retrieves the cached inverse. If x$inverse
## is null or if x$matrix has been altered to differ from x$backup, the
## function recalculates the inverse of the matrix.
cacheSolve <- function(x, ...) {
inv <- x$inverse
if(is.null(inv) || x$matrix != x$backup){
print("no cached inverse, calculating inverse...")
inverse <- solve(x$matrix)
print(inverse)
}else if(!is.null(inv) && x$matrix == x$backup){
print("retrieving cached inverse")
inverse <- inv
print(inverse)
}
}
makeCacheMatrix(a)
b=makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
set.seed(20)
x = rnorm(100)
e = rnorm(100,0,2)
y = 0.5 + 2*x + e
y
plot(x,y)
lm
## This R-file contains two functions that inverses and cache the inverse of matrix
## for faster executation
## This function creates a matrix that will store its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(invers) inv <<- invers
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function returns the inverse of the matrix, will first checked the cache
## if the inverse is already stored, otherwise it will compute the inverse then store it, before returning
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
return(inv)
}
summaryRprof(lm)
summaryRprof(lm,out)
## This R-file contains two functions that inverses and cache the inverse of matrix
## for faster executation
## This function creates a matrix that will store its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(invers) inv <<- invers
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function returns the inverse of the matrix, will first checked the cache
## if the inverse is already stored, otherwise it will compute the inverse then store it, before returning
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
return(inv)
}
a = matrix(1:4,nrow=2,ncol=2)
a
b = cacheSolve(a)
b = cacheSolve(a)
b = makeCacheMatrix(a)
summaryRprof(c <- cacheSolve(b))
Rprof(c <- cacheSolve(b))
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(xlsx)
install.packages("xlsx")
install.packages("xlsx")
install.packages('rJava')
setwd("~/Documents/DataScienceSpecialization-JHU/Exploratory Data Analysis/Week1/ExData_Plotting1")
data.table)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y1 = grep("*2007-02-01",x_date)
y2 = grep("*2007-02-02",x_date)
z1 = as.numeric(dat$Global_active_power[y1])
z2 = as.numeric(dat$Global_active_power[y2])
z = c(z1,z2)
ary(data.table)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y1 = grep("*2007-02-01",x_date)
y2 = grep("*2007-02-02",x_date)
z1 = as.numeric(dat$Global_active_power[y1])
z2 = as.numeric(dat$Global_active_power[y2])
z = c(z1,z2)
library(data.table)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
library(data.table)
library(lubridate)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y1 = grep("*2007-02-01",x_date)
y2 = grep("*2007-02-02",x_date)
z1 = as.numeric(dat$Global_active_power[y1])
z2 = as.numeric(dat$Global_active_power[y2])
z = c(z1,z2)
hist(z)
png("plot1.png", width = 480, height = 480)
hist(z, main = "Global Active Power", col = "red", xlab = "Global Active Power (kilowatts)")
dev.off()
paste(x_date, dat$Time)
dmy_hms(paste(x_date, dat$Time))
dmy_hms(paste(dat$Date, dat$Time))
x_date
paste(x_date,dat$Time)
ymd_hms(paste(dat$Date, dat$Time))
ymd_hms(paste(x_date, dat$Time))
x_time = ymd_hms(paste(x_date, dat$Time))
c(y1,y2)
lenght(c(y1,y2))
length(c(y1,y2))
library(data.table)
library(lubridate)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y = c(grep("*2007-02-01",x_date),grep("*2007-02-02",x_date))
z = as.numeric(dat$Global_active_power[y])
png("plot1.png", width = 480, height = 480)
hist(z, main = "Global Active Power", col = "red", xlab = "Global Active Power (kilowatts)")
dev.off()
x_time = ymd_hms(paste(x_date, dat$Time))[y]
x_time
length(x_time)
library(data.table)
library(lubridate)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y = c(grep("*2007-02-01",x_date),grep("*2007-02-02",x_date))
z = as.numeric(dat$Global_active_power[y])
x_time = ymd_hms(paste(x_date, dat$Time))[y]
png("plot2.png", width = 480, height = 480)
plot(x_time,z, x_lab = "", y_lab = "Global Active Power (kilowatts)", type = "l")
dev.off()
plot(x_time,z, x_lab = "", y_lab = "Global Active Power (kilowatts)", type = "l")
warning()
warning()
warnings()
warnings(1)
plot(x_time,z, x_lab = "", y_lab = "Global Active Power (kilowatts)", type = "l")
png("plot2.png", width = 480, height = 480)
plot(x_time,z, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
dev.off()
dat
names(dat)
brary(data.table)
library(lubridate)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y = c(grep("*2007-02-01",x_date),grep("*2007-02-02",x_date))
sub1 = as.numeric(dat$Sub_metering_1[y])
sub2 = as.numeric(dat$Sub_metering_2[y])
sub3 = as.numeric(dat$Sub_metering_3[y])
x_time = ymd_hms(paste(x_date, dat$Time))[y]
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2)
points(x_time,sub3)
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l")
points(x_time,sub3, type = "l")
plot(x_time,sub3, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub1, type = "l", col = "blue")
plot(x_time,z, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
plot(x_time,sub3, xlab = "", ylab = "Energy sub metering", type = "l")
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub3, type = "l", col = "blue")
legend("topright", pch = "-", col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
ime,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub3, type =
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
png("plot3.png", width = 480, height = 480)
library(data.table)
library(lubridate)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
ata.table)
library(lubridate)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y = c(grep("*2007-02-01",x_date),grep("*2007-02-02",x_date))
sub1 = as.numeric(dat$Sub_metering_1[y])
sub2 = as.numeric(dat$Sub_metering_2[y])
sub3 = as.numeric(dat$Sub_metering_3[y])
x_time = ymd_hms(paste(x_date, dat$Time))[y]
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub3, type = "l", col = "blue")
legend("topright", pch = "-", bty = "n",col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
legend("topright", pch = "-",col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
library(data.table)
library(lubridate)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y = c(grep("*2007-02-01",x_date),grep("*2007-02-02",x_date))
sub1 = as.numeric(dat$Sub_metering_1[y])
sub2 = as.numeric(dat$Sub_metering_2[y])
sub3 = as.numeric(dat$Sub_metering_3[y])
x_time = ymd_hms(paste(x_date, dat$Time))[y]
png("plot3.png", width = 480, height = 480)
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub3, type = "l", col = "blue")
legend("topright", pch = "-",col = c("black","red","blue"), legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
dev.off()
names(dat)
volt = dat$Voltage[y]
volt
class(volt)
volt = as.numeric(dat$Voltage[y])
volt
2-01",x_date),grep("*2007-02-02",x_date))
sub1 = as.numeric(dat$Sub_metering_1[y])
sub2 = as.numeric(dat$Sub_metering_2[y])
sub3 = as.numeric(dat$Sub_metering_3[y])
x_time = ymd_hms(paste(x_date, dat$Time))[y]
volt = as.numeric(dat$Voltage[y])
reactive = as.numeric(dat$Global_reactive_power[y])
source('~/Documents/DataScienceSpecialization-JHU/Exploratory Data Analysis/Week1/ExData_Plotting1/plot4.R')
source('~/Documents/DataScienceSpecialization-JHU/Exploratory Data Analysis/Week1/ExData_Plotting1/plot4.R')
2-01",x_date),grep("*2007-02-02",x_date))
sub1 = as.numeric(dat$Sub_metering_1[y])
sub2 = as.numeric(dat$Sub_metering_2[y])
sub3 = as.numeric(dat$Sub_metering_3[y])
x_time = ymd_hms(paste(x_date, dat$Time))[y]
volt = as.numeric(dat$Voltage[y])
reactive = as.numeric(dat$Global_reactive_power[y])
active = as.numeric(dat$Global_active_power[y])
png("plot4.png", width = 480, height = 480)
par(mfrow = c(2,2))
plot(x_time,active, xlab = "", ylab = "Global Active Power", type = "l")
plot(x_time,volt, xlab = "datetime", ylab = "Voltage", type = "l")
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub3, type = "l", col = "blue")
legend("topright", pch = "-", bty = "n", col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(x_time,reactive, xlab = "datetime", ylab = "Global_reactive_power", type = "l")
dev.off()
ary(data.table)
library(lubridate)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y = c(grep("*2007-02-01",x_date),grep("*2007-02-02",x_date))
sub1 = as.numeric(dat$Sub_metering_1[y])
sub2 = as.numeric(dat$Sub_metering_2[y])
sub3 = as.numeric(dat$Sub_metering_3[y])
x_time = ymd_hms(paste(x_date, dat$Time))[y]
volt = as.numeric(dat$Voltage[y])
reactive = as.numeric(dat$Global_reactive_power[y])
active = as.numeric(dat$Global_active_power[y])
library(data.table)
library(lubridate)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y = c(grep("*2007-02-01",x_date),grep("*2007-02-02",x_date))
sub1 = as.numeric(dat$Sub_metering_1[y])
sub2 = as.numeric(dat$Sub_metering_2[y])
sub3 = as.numeric(dat$Sub_metering_3[y])
x_time = ymd_hms(paste(x_date, dat$Time))[y]
volt = as.numeric(dat$Voltage[y])
reactive = as.numeric(dat$Global_reactive_power[y])
active = as.numeric(dat$Global_active_power[y])
par(mfrow = c(2,2))
plot(x_time,active, xlab = "", ylab = "Global Active Power", type = "l")
plot(x_time,volt, xlab = "datetime", ylab = "Voltage", type = "l")
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub3, type = "l", col = "blue")
legend("topright", pch = "-", bty = "n", col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(x_time,reactive, xlab = "datetime", ylab = "Global_reactive_power", type = "l")
dev.off()
g("plot4.png", width = 480, height = 480)
par(mfrow = c(2,2))
plot(x_time,active, xlab = "", ylab = "Global Active Power", type = "l")
plot(x_time,volt, xlab = "datetime", ylab = "Voltage", type = "l")
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub3, type = "l", col = "blue")
legend("topright", pch = "-", bty = "n", col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(x_time,reactive, xlab = "datetime", ylab = "Global_reactive_power", type = "l")
dev.off()
("plot4.png", width = 480, height = 480)
par(mfrow = c(2,2))
plot(x_time,active, xlab = "", ylab = "Global Active Power", type = "l")
plot(x_time,volt, xlab = "datetime", ylab = "Voltage", type = "l")
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub3, type = "l", col = "blue")
legend("topright", pch = "-", bty = "n", col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(x_time,reactive, xlab = "datetime", ylab = "Global_reactive_power", type = "l")
dev.off()
png("plot4.png", width = 480, height = 480)
par(mfrow = c(2,2))
plot(x_time,active, xlab = "", ylab = "Global Active Power", type = "l")
plot(x_time,volt, xlab = "datetime", ylab = "Voltage", type = "l")
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub3, type = "l", col = "blue")
legend("topright", pch = "-", bty = "n", col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(x_time,reactive, xlab = "datetime", ylab = "Global_reactive_power", type = "l")
dev.off()
library(data.table)
library(lubridate)
dat = fread("../exdata_data_household_power_consumption/household_power_consumption.txt",sep = ";")
x_date = dmy(dat$Date)
x_date = as.Date(x_date)
y = c(grep("*2007-02-01",x_date),grep("*2007-02-02",x_date))
sub1 = as.numeric(dat$Sub_metering_1[y])
sub2 = as.numeric(dat$Sub_metering_2[y])
sub3 = as.numeric(dat$Sub_metering_3[y])
x_time = ymd_hms(paste(x_date, dat$Time))[y]
volt = as.numeric(dat$Voltage[y])
reactive = as.numeric(dat$Global_reactive_power[y])
active = as.numeric(dat$Global_active_power[y])
png("plot4.png", width = 480, height = 480)
par(mfrow = c(2,2))
plot(x_time,active, xlab = "", ylab = "Global Active Power", type = "l")
plot(x_time,volt, xlab = "datetime", ylab = "Voltage", type = "l")
plot(x_time,sub1, xlab = "", ylab = "Energy sub metering", type = "l")
points(x_time,sub2, type = "l", col = "red")
points(x_time,sub3, type = "l", col = "blue")
legend("topright", pch = "-", bty = "n", col = c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(x_time,reactive, xlab = "datetime", ylab = "Global_reactive_power", type = "l")
dev.off()
